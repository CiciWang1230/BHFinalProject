# -*- coding: utf-8 -*-
"""BHFinalProj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d2AXtBDsEPsvnF-dbEZ9sPiSKucGMRId
"""

import numpy as np
import matplotlib.pyplot as plt
import requests
import math

baseUrl = 'http://www.tng-project.org/api/'
headers = {"api-key":"128de4248c745e040927ee558a9bcd62"} #this is my (Jack) API key btw

def get(path, params=None):
    # make HTTP GET request to path
    r = requests.get(path, params=params, headers=headers)

    # raise exception if response code is not HTTP SUCCESS (200)
    r.raise_for_status()

    if r.headers['content-type'] == 'application/json':
        return r.json() # parse json responses automatically
    return r

r = get(baseUrl)
r.keys()
names = [sim['name'] for sim in r['simulations']]

#defining the "sim" function for TNG100-1
i = names.index('TNG100-1')
sim = get( r['simulations'][i]['url'])

#defining redshift values we are testing, etc
redshifts = [0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6]
sfrData = []
fractSubhalosUsed = 1.0



snaps = get(sim['url'] + 'snapshots/')

#Looping through all the snapshots to find the exact snapshots corresponding to the redshifts we're sampling
l=0
#redshifts with intervals of 0.5
snapz_00 = 0
snapz_05 = 0
snapz_10 = 0
snapz_15 = 0
snapz_20 = 0
snapz_25 = 0
snapz_30 = 0
snapz_35 = 0
snapz_40 = 0
snapz_45 = 0
snapz_50 = 0
snapz_55 = 0
snapz_60 = 0



#function for the ones in intervals of 0.5
while l < len(snaps):
  lval = float("{:.1f}".format(snaps[l]['redshift']))
  if lval == 0.0:
    snapz_00 = l
  elif lval == 0.5:
    snapz_05 = l
  elif lval == 1.0:
    snapz_10 = l
  elif lval == 1.5:
    snapz_15 = l
  elif lval == 2.0:
    snapz_20 = l
  elif lval == 2.5:
    snapz_25 = l
  elif lval == 3.0:
    snapz_30 = l
  elif lval == 3.5:
    snapz_35 = l
  elif lval == 4.0:
    snapz_40 = l
  elif lval == 4.5:
    snapz_45 = l
  elif lval == 5.0:
    snapz_50 = l
  elif lval == 5.5:
    snapz_55 = l
  elif lval == 6.0:
    snapz_60 = l
  l = l+1



  snapzlist = [snapz_00, snapz_05, snapz_10, snapz_15, snapz_20, snapz_25, snapz_30, snapz_35, snapz_40, snapz_45, snapz_50, snapz_55, snapz_60]

#parameters for the search
params = {'limit': 100, 'order_by': '-mass_stars'}

#this returns a list of subhalos for a given redshift (input value), for bulk data retrieval
def subhalos(z):
  x = int(2*z)
  subhalos_url = snaps[snapzlist[x]]['url'] + 'subhalos/'
  return get(subhalos_url, params)

#function to pick a sample of subhalos using the above function, also for bulk data retrieval; fix
def pickSampledSubs(z):
  #subhalo_list = subhalos(z)['results']
  #sampledSubs = np.random.choice(subhalo_list, size=int(len(subhalo_list)*fractSubhalosUsed), replace=False)
  subhalo_list = subhalos(z)['results']
  sampledSubs = subhalo_list
  return sampledSubs

#function to find the subhalo arrays
def findSFR(y): #input an array of subhalos (ie from pick sampled subs) and
  sfrs = []
  i=0
  for i in range(0,len(y)):
    print(len(y))
    samplesubsfr = y[i]['sfr']
    sfrs.append(samplesubsfr)
    i=i+1
  return sfrs

  #im thinking that if we need to filter out some 0 or NaN values from the sfrs we can make a mask to do that; im not super familiar with masks and also based on what i've tested it doesn't seem necessary

#actually getting data:

#sampling subhalos
samplesubs_z00 = pickSampledSubs(0)
samplesubs_z05 = pickSampledSubs(0.5)
#samplesubs_z10 = pickSampledSubs(1)
#samplesubs_z15 = pickSampledSubs(1.5)
#samplesubs_z20 = pickSampledSubs(2)
#samplesubs_z25 = pickSampledSubs(2.5)
#samplesubs_z30 = pickSampledSubs(3)
#samplesubs_z35 = pickSampledSubs(3.5)
#samplesubs_z40 = pickSampledSubs(4)
#samplesubs_z45 = pickSampledSubs(4.5)
#samplesubs_z50 = pickSampledSubs(5)
#samplesubs_z55 = pickSampledSubs(5.5)
#samplesubs_z60 = pickSampledSubs(6)


#finding their sfr's
sfr_z00 = findSFR(samplesubs_z00)
sfr_z05 = findSFR(samplesubs_z05)
#sfr_z10 = findSFR(samplesubs_z10)
#sfr_z15 = findSFR(samplesubs_z15)
#sfr_z20 = findSFR(samplesubs_z20)
#sfr_z25 = findSFR(samplesubs_z25)
#sfr_z30 = findSFR(samplesubs_z30)
#sfr_z35 = findSFR(samplesubs_z35)
#sfr_z40 = findSFR(samplesubs_z40)
#sfr_z45 = findSFR(samplesubs_z45)
#sfr_z50 = findSFR(samplesubs_z50)
#sfr_z55 = findSFR(samplesubs_z55)
#sfr_z60 = findSFR(samplesubs_z60)



#avg sfr for each redshift
avg_sfr_z00 = sum(sfr_z00)/len(sfr_z00)
avg_sfr_z05 = sum(sfr_z05)/len(sfr_z05)
#avg_sfr_z10 = sum(sfr_z10)/len(sfr_z10)
#avg_sfr_z15 = sum(sfr_z15)/len(sfr_z15)
#avg_sfr_z20 = sum(sfr_z20)/len(sfr_z20)
#avg_sfr_z25 = sum(sfr_z25)/len(sfr_z25)
#avg_sfr_z30 = sum(sfr_z30)/len(sfr_z30)
#avg_sfr_z35 = sum(sfr_z35)/len(sfr_z35)
#avg_sfr_z40 = sum(sfr_z40)/len(sfr_z40)
#avg_sfr_z45 = sum(sfr_z45)/len(sfr_z45)
#avg_sfr_z50 = sum(sfr_z50)/len(sfr_z50)
#avg_sfr_z55 = sum(sfr_z55)/len(sfr_z55)
#avg_sfr_z60 = sum(sfr_z60)/len(sfr_z60)

#initializing numpy array containing sfr's; ie sfrData
sfrData = np.array([avg_sfr_z00,avg_sfr_z05])
print(sfrData)
#sfrData = np.array([avg_sfr_z00,avg_sfr_z05,avg_sfr_z10,avg_sfr_z15,avg_sfr_z20,avg_sfr_z25, avg_sfr_z30, avg_sfr_z35, avg_sfr_z40, avg_sfr_z45, avg_sfr_z50, avg_sfr_z55, avg_sfr_z60])



plt.figure(figsize=(10, 6))
plt.plot(redshifts, sfrData, marker='o', linestyle='-', color='blue')
plt.xlabel('Redshift (z)')
plt.ylabel('Average Star Formation Rate')
plt.title('Star Formation Rate vs Redshift (Sampled)')
plt.grid(True)
plt.show()

